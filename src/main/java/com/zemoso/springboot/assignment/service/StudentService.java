package com.zemoso.springboot.assignment.service;

import com.zemoso.springboot.assignment.dto.StudentDTO;
import com.zemoso.springboot.assignment.entity.Department;
import com.zemoso.springboot.assignment.entity.Student;
import com.zemoso.springboot.assignment.repository.DepartmentRepository;
import com.zemoso.springboot.assignment.repository.StudentRepository;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class StudentService {

    private StudentRepository studentRepository;
    private DepartmentRepository departmentRepository;

    public StudentService(StudentRepository studentRepository, DepartmentRepository departmentRepository) {
        this.studentRepository = studentRepository;
        this.departmentRepository = departmentRepository;
    }

    public List<StudentDTO> getAllStudents() {
        List<Student> student = studentRepository.findAll();
        return student.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public StudentDTO getStudentById(Long id) {
        Student student = studentRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Student not found with id " + id));

        return convertToDto(student);
    }

    public StudentDTO createStudent(StudentDTO studentDTO) {
        Department department = departmentRepository.findById(studentDTO.getDepartmentId())
                .orElseThrow(() ->
                        new NoSuchElementException(("Department not found with id " +
                                studentDTO.getDepartmentId())));

        Student student = convertToEntity(studentDTO);
        student.setDepartment(department);

        // Clear the ID to ensure it is generated by the database
        student.setId(null);

        student = studentRepository.save(student);
        //System.out.println(student.toString());
        return convertToDto(student);
    }

    public StudentDTO updateStudent(StudentDTO studentDTO) {
        Student existingStudent = studentRepository.findById(studentDTO.getId())
                .orElseThrow(()
                -> new NoSuchElementException("Student not found with id " + studentDTO.getId()));

        existingStudent.setFirstName(studentDTO.getFirstName());
        existingStudent.setLastName(studentDTO.getLastName());
        existingStudent.setEmail(studentDTO.getEmail());
        Department department = departmentRepository.findById(studentDTO.getDepartmentId())
                .orElseThrow(()
                        -> new NoSuchElementException("Student not found with id " + studentDTO.getDepartmentId()));
        existingStudent.setDepartment(department);

        Student student = studentRepository.save(existingStudent);
        return convertToDto(student);
    }

    public void deleteStudent(Long id) {
        studentRepository.deleteById(id);
    }

    private StudentDTO convertToDto(Student student) {
        StudentDTO studentDTO = new StudentDTO();
        studentDTO.setId(student.getId());
        studentDTO.setFirstName(student.getFirstName());
        studentDTO.setLastName(student.getLastName());
        studentDTO.setEmail(student.getEmail());
        studentDTO.setDepartmentId(student.getDepartment().getId());

        return studentDTO;
    }
    private Student convertToEntity(StudentDTO studentDTO) {
        Student student = new Student();
        student.setId(studentDTO.getId());
        student.setFirstName(studentDTO.getFirstName());
        student.setLastName(studentDTO.getLastName());
        student.setEmail(studentDTO.getEmail());
        return student;
    }
}
